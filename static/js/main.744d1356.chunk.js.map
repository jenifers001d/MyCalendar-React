{"version":3,"sources":["Calendar.js","App.js","serviceWorker.js","index.js"],"names":["ClendarWrapper","styled","div","HeaderOuter","MonthNav","Cell","DatesCell","GrayCell","RowCells","RowArray","Calendar","state","currentMonth","Date","selectedDate","prevMonth","setState","moment","subtract","nextMonth","add","clickDate","onClick","this","format","day","startDay","weekdays","i","push","key","startOfMonth","startOf","endOfMonth","endOf","startDate","endDate","console","log","date","datesArr","weeksArr","firstDayOfWeek","renderHeader","renderWeekdays","renderCells","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0+CAIA,IAAMA,EAAiBC,IAAOC,IAAV,KAGdC,EAAcF,IAAOC,IAAV,KAOXE,EAAWH,IAAOC,IAAV,KAURG,EAAOJ,IAAOC,IAAV,KAKJI,EAAYL,YAAOI,EAAPJ,CAAH,KAMTM,EAAWN,YAAOK,EAAPL,CAAH,KAGRO,EAAWP,IAAOC,IAAV,KAMRO,EAAWR,IAAOC,IAAV,KAyFCQ,E,2MAlFbC,MAAQ,CACNC,aAAc,IAAIC,KAClBC,aAAc,IAAID,M,EA0DpBE,UAAY,WACV,EAAKC,SAAS,CACZJ,aAAcK,IAAO,EAAKN,MAAMC,cAAcM,SAAS,EAAG,Q,EAG9DC,UAAY,WACV,EAAKH,SAAS,CACZJ,aAAcK,IAAO,EAAKN,MAAMC,cAAcQ,IAAI,EAAG,Q,EAGzDC,UAAY,a,8EAhEV,OACE,kBAAClB,EAAD,KACE,kBAACC,EAAD,CAAUkB,QAASC,KAAKR,WAAY,KACpC,6BAAME,IAAOM,KAAKZ,MAAMC,cAAcY,OAJhB,aAKtB,kBAACpB,EAAD,CAAUkB,QAASC,KAAKJ,WAAY,Q,uCAUxC,IAJA,IAGIM,EAFEC,EAAWT,IAAOM,KAAKZ,MAAMC,cAAca,IAAI,GACjDE,EAAW,GAENC,EAAI,EAAGA,EAAI,EAAGA,IACrBH,EAAMR,IAAOS,GAAUN,IAAIQ,EAAG,KAC9BD,EAASE,KAAK,kBAACxB,EAAD,CAAMyB,IAAKF,GAAIX,IAAOQ,GAAKD,OANpB,SAQvB,OAAO,kBAAChB,EAAD,KAAWmB,K,oCAIlB,IACMI,EAAed,IAAOM,KAAKZ,MAAMC,cAAcoB,QAAQ,SACvDC,EAAahB,IAAOM,KAAKZ,MAAMC,cAAcsB,MAAM,SACnDC,EAAYlB,IAAOc,GAAcC,QAAQ,QACzCI,EAAUnB,IAAOgB,GAAYC,MAAM,QACzCG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAMZ,IALA,IAEIG,EAFAC,EAAW,GACXC,EAAW,GAEXC,EAAiBP,EAEdO,EAAiBN,GAAS,CAC/B,IAAK,IAAIR,EAAI,EAAGA,EAAI,EAAGA,KACrBW,EAAOtB,IAAOyB,GAAgBtB,IAAIQ,EAAG,MAC1BG,GAAgBQ,EAAON,EAChCO,EAASX,KACP,kBAACtB,EAAD,CAAUuB,IAAKS,GAAOtB,IAAOsB,GAAMf,OAjBvB,OAoBdgB,EAASX,KACP,kBAACvB,EAAD,CAAWwB,IAAKS,GAAOtB,IAAOsB,GAAMf,OArBxB,OAyBlBiB,EAASZ,KAAK,kBAACrB,EAAD,KAAWgC,IACzBA,EAAW,GACXE,EAAiBzB,IAAOsB,GAAMnB,IAAI,EAAG,KACrCQ,EAEF,OAAO,kBAACnB,EAAD,KAAWgC,K,+BAclB,OACE,kBAACzC,EAAD,KACGuB,KAAKoB,eACLpB,KAAKqB,iBACLrB,KAAKsB,mB,GA7ESC,IAAMC,WCrCdC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.744d1356.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\nconst ClendarWrapper = styled.div`\n  border: 1px solid black;\n`;\nconst HeaderOuter = styled.div`\n  background-color: #89c8ff;\n  padding: 5px;\n  display: flex;\n  justify-content: space-between;\n  line-height: 33px;\n`;\nconst MonthNav = styled.div`\n  width: 35px;\n  height: 35px;\n  text-align: center;\n  line-height: 33px;\n  :hover {\n    background-color: #0088ff;\n    color: white;\n  }\n`;\nconst Cell = styled.div`\n  width: 14.2%;\n  height: 35px;\n  line-height: 33px;\n`;\nconst DatesCell = styled(Cell)`\n  :hover {\n    background-color: #0088ff;\n    color: white;\n  }\n`;\nconst GrayCell = styled(DatesCell)`\n  color: rgb(168, 168, 168);\n`;\nconst RowCells = styled.div`\n  padding: 5px 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\nconst RowArray = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`;\n\nclass Calendar extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n  };\n  renderHeader() {\n    const headerMonthFormat = \"MMM YYYY\";\n    return (\n      <HeaderOuter>\n        <MonthNav onClick={this.prevMonth}>{\"<\"}</MonthNav>\n        <div>{moment(this.state.currentMonth).format(headerMonthFormat)}</div>\n        <MonthNav onClick={this.nextMonth}>{\">\"}</MonthNav>\n      </HeaderOuter>\n    );\n  }\n\n  renderWeekdays() {\n    const weekdaysFormat = \"ddd\";\n    const startDay = moment(this.state.currentMonth).day(0);\n    let weekdays = [];\n    let day;\n    for (let i = 0; i < 7; i++) {\n      day = moment(startDay).add(i, \"d\");\n      weekdays.push(<Cell key={i}>{moment(day).format(weekdaysFormat)}</Cell>);\n    }\n    return <RowCells>{weekdays}</RowCells>;\n  }\n\n  renderCells() {\n    const cellsFormat = \"D\";\n    const startOfMonth = moment(this.state.currentMonth).startOf(\"month\");\n    const endOfMonth = moment(this.state.currentMonth).endOf(\"month\");\n    const startDate = moment(startOfMonth).startOf(\"week\");\n    const endDate = moment(endOfMonth).endOf(\"week\");\n    console.log(startDate);\n    console.log(endDate);\n    let datesArr = [];\n    let weeksArr = [];\n    let date;\n    let firstDayOfWeek = startDate;\n    let i = 0;\n    while (firstDayOfWeek < endDate) {\n      for (let i = 0; i < 7; i++) {\n        date = moment(firstDayOfWeek).add(i, \"d\");\n        if (date < startOfMonth || date > endOfMonth) {\n          datesArr.push(\n            <GrayCell key={date}>{moment(date).format(cellsFormat)}</GrayCell>\n          );\n        } else {\n          datesArr.push(\n            <DatesCell key={date}>{moment(date).format(cellsFormat)}</DatesCell>\n          );\n        }\n      }\n      weeksArr.push(<RowCells>{datesArr}</RowCells>);\n      datesArr = [];\n      firstDayOfWeek = moment(date).add(1, \"d\");\n      i++;\n    }\n    return <RowArray>{weeksArr}</RowArray>;\n  }\n  prevMonth = () => {\n    this.setState({\n      currentMonth: moment(this.state.currentMonth).subtract(1, \"M\"),\n    });\n  };\n  nextMonth = () => {\n    this.setState({\n      currentMonth: moment(this.state.currentMonth).add(1, \"M\"),\n    });\n  };\n  clickDate = () => {};\n  render() {\n    return (\n      <ClendarWrapper>\n        {this.renderHeader()}\n        {this.renderWeekdays()}\n        {this.renderCells()}\n      </ClendarWrapper>\n    );\n  }\n}\n\nexport default Calendar;\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Calendar from \"./Calendar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar></Calendar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}